apply plugin: 'application'

mainClassName = 'de.maibornwolff.codecharta.tools.ccsh.Ccsh'
applicationName = 'ccsh'

dependencies {
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: kotlin_version

    def codeMaatImporter = project(':import:CodeMaatImporter')
    def crococosmoImporter = project(':import:CrococosmoImporter')
    def csvImporter = project(':import:CSVImporter')
    def jasomeImporter = project(':import:JasomeImporter')
    def scmlogParser = project(':import:SCMLogParser')
    def sonarImporter = project(':import:SonarImporter')
    def sourceCodeParser = project(':import:SourceCodeParser')
    def understandImporter = project(':import:UnderstandImporter')
    def mergeFilter = project(':filter:MergeFilter')
    def edgeFilter = project(':filter:EdgeFilter')
    def validationTool = project(':tools:ValidationTool')
    def csvExporter = project(':export:CSVExporter')

    // first compile is for dependency in main, testCompile is so our test suite can find all other tests
    compile codeMaatImporter; testCompile codeMaatImporter.sourceSets.test.output
    compile crococosmoImporter; testCompile crococosmoImporter.sourceSets.test.output
    compile csvImporter; testCompile csvImporter.sourceSets.test.output
    compile jasomeImporter; testCompile jasomeImporter.sourceSets.test.output
    compile scmlogParser; testCompile scmlogParser.sourceSets.test.output
    compile sonarImporter; testCompile sonarImporter.sourceSets.test.output
    compile sourceCodeParser; testCompile sourceCodeParser.sourceSets.test.output
    compile understandImporter; testCompile understandImporter.sourceSets.test.output
    compile mergeFilter; testCompile mergeFilter.sourceSets.test.output
    compile edgeFilter; testCompile edgeFilter.sourceSets.test.output
    compile validationTool; testCompile validationTool.sourceSets.test.output
    compile csvExporter; testCompile csvExporter.sourceSets.test.output

    compile group: 'info.picocli', name: 'picocli', version: picocli_version

    testCompile("org.junit.platform:junit-platform-runner:$junit_platform_version")
}

jar {
    baseName = "${applicationName}"
    manifest {
        attributes 'Main-Class': mainClassName,
                'Implementation-Title': 'CodeCharta ccsh',
                'Implementation-Version': version
    }

    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}